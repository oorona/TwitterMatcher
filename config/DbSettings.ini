[Database]
db_file_name=./db/twitterdb.sqlite

[Sql]
tweets_insert=Insert into tweets (id, message, original_message, capture_time) values(?,?,?,?)
hashtags_insert=Insert into hashtags (tweet_id,hashtag) values(?,?)
urls_insert=Insert into urls (tweet_id,url) values(?,?)
usermentions_insert=Insert into usermentions (tweet_id,user_id,name,screen_name) values(?,?,?,?)
tokens_select=Select doc_number from tokens where id=?
tokens_insert=Insert or replace into tokens (id,doc_number,idf) values (?,coalesce((select doc_number+1 from tokens where id=?),1),0)
tokens_update=Update tokens set doc_number=?, idf=? where id=?
tokens_tweets_insert=Insert into tokens_tweets (token_id,tweet_id,token_number) values (?,?,?)
tweets_select_total=Select count(*) total from Tweets
tokens_select_all=Select id,doc_number from tokens
tokens_update_idf=Update tokens set idf=? where id=?
tokens_select_token_count=Select doc_number from tokens where id=?
tokens_select_idf=Select idf from tokens where id=?
tokens_tweets_tokens_join=select count(*) from (select tweet_id from tokens_tweets where token_id =? intersect Select tweet_id from tokens_tweets where token_id =?)
tokens_select_top_IDF=select t4.token_id,t4.total_docs,t3.doc_number,t3.idf, t4.total_docs*t3.idf  from (select t2.token_id, sum(t2.token_number) total_docs from tokens_tweets t1 join tokens_tweets t2 on (t1.tweet_id=t2.tweet_id)  where t1.token_id=? and t1.token_id<>t2.token_id group by t2.token_id) t4 join tokens t3 on (t3.id=t4.token_id) order by 5 desc limit ?
tokens_select_top_number=select id from tokens order by doc_number desc limit ?
snapshots_insert=insert into snapshots (capture_time ) values (?)
pragma_on=PRAGMA foreign_keys = ON
sql_changes=select changes()

tweets_delete_older=delete from tweets where capture_time < (select max(capture_time) from (select capture_time from snapshots order by capture_time limit (select count(*) from snapshots)-?))
snapshots_delete_older=delete from snapshots where id in (select id from snapshots order by capture_time limit (select count(*) - ? from snapshots))
tokens_delete_older=delete from tokens where doc_number=0
tokens_tweets_delete=delete from tokens_tweets where not exists (select 1 from tweets where id=tweet_id);
update_tokens_doc_number=update tokens set doc_number=(select count(*) from tokens_tweets tt where tokens.id=tt.token_id)
snapshots_select_count_all=select count(*) from snapshots


[Ddl]
tweets=create table tweets (id INTEGER PRIMARY KEY,message TEXT not null,original_message text not null,capture_time TEXT not null)
urls=create table urls(tweet_id INTEGER not null,url TEXT not null,FOREIGN KEY(tweet_id) REFERENCES tweets(id) ON DELETE CASCADE)
hashtags=create table hashtags(tweet_id INTEGER not null,hashtag TEXT not null,FOREIGN KEY(tweet_id) REFERENCES tweets(id) ON DELETE CASCADE)
usermentions=create table usermentions(tweet_id INTEGER not null,user_id TEXT not null,name TEXT not null,screen_name TEXT not null,FOREIGN KEY(tweet_id) REFERENCES tweets(id) ON DELETE CASCADE)
tokens=create table tokens(id text not null primary key,doc_number INTEGER not null,idf FLOAT not null )
tokens_tweets=create table tokens_tweets (token_id text not null,tweet_id INTEGER not null,token_number integer not null,FOREIGN KEY(tweet_id) REFERENCES tweets(id) ON DELETE cascade,FOREIGN KEY(token_id) REFERENCES tokens(id))
snapshots=create table snapshots (id INTEGER primary key,capture_time text)
indextt_token_id=create index tt_token_id on tokens_tweets(token_id)
indextt_tweet_id=create index tt_tweet_id on tokens_tweets(tweet_id)
indext_c=create index t_capture on tweets (capture_time)


